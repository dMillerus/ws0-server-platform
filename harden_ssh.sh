#!/bin/bash
# SSH Hardening Script for Arch Linux
# Run this script with sudo privileges

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}SSH Hardening Script for Arch Linux${NC}"
echo "================================================"

# Function to print status
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   print_error "This script must be run as root (use sudo)"
   exit 1
fi

# Step 1: System Update
print_status "Step 1: Updating system packages..."
pacman -Syu --noconfirm

# Step 2: Backup SSH config
print_status "Step 2: Backing up SSH configuration..."
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak.$(date +%F)
print_status "Backup created: /etc/ssh/sshd_config.bak.$(date +%F)"

# Step 3: Create hardened SSH config
print_status "Step 3: Creating hardened SSH configuration..."
cat > /etc/ssh/sshd_config << 'EOF'
# Hardened SSH Configuration for Arch Linux
# Generated by SSH hardening script

# 2.1 Disable obsolete protocols
Protocol 2

# 2.2 Keep standard port (behind firewall)
# Port 22

# 2.3 Prevent root login
PermitRootLogin no

# 2.4 Enforce key-only auth
PasswordAuthentication no
ChallengeResponseAuthentication no
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# 2.5 Limit login attempts & sessions
MaxAuthTries 3
MaxSessions 2

# 2.6 Idle timeout
ClientAliveInterval 300      # 5 minutes
ClientAliveCountMax 0

# 2.7 Restrict who can connect
AllowUsers dave

# 2.8 Disable tunneled features you don't need
X11Forwarding no
AllowTcpForwarding no
PermitTunnel no

# 2.9 Verbose logging
LogLevel VERBOSE

# 2.10 Strong ciphers/MACs/Kex (forward-thinking)
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256

# 2.11 FIDO/U2F hardware key support
PubkeyAcceptedAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ecdsa-sha2-nistp256,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com

# Additional security settings
UseDNS no
PermitEmptyPasswords no
MaxStartups 10:30:60
LoginGraceTime 30
StrictModes yes
IgnoreRhosts yes
HostbasedAuthentication no
PermitUserEnvironment no
Compression no
TCPKeepAlive no
AllowAgentForwarding no
GatewayPorts no
EOF

# Step 4: Create systemd override for SSH service sandboxing
print_status "Step 4: Creating systemd service sandboxing..."
mkdir -p /etc/systemd/system/sshd.service.d/
cat > /etc/systemd/system/sshd.service.d/override.conf << 'EOF'
[Service]
ProtectSystem=full
ProtectHome=yes
PrivateTmp=yes
NoNewPrivileges=yes
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6
CapabilityBoundingSet=CAP_AUDIT_WRITE CAP_CHOWN CAP_FOWNER CAP_SETUID CAP_SETGID
EOF

# Step 5: Install and configure fail2ban
print_status "Step 5: Installing and configuring fail2ban..."
pacman -S --noconfirm fail2ban

# Create fail2ban SSH jail
mkdir -p /etc/fail2ban/jail.d/
cat > /etc/fail2ban/jail.d/sshd.local << 'EOF'
[sshd]
enabled = true
port    = 22
maxretry = 3
bantime  = 1h
findtime = 10m
EOF

# Step 6: Configure nftables for rate limiting
print_status "Step 6: Setting up firewall rate limiting..."
# Install nftables if not present
pacman -S --noconfirm nftables

# Create basic nftables config with SSH rate limiting
cat > /etc/nftables.conf << 'EOF'
#!/usr/sbin/nft -f

flush ruleset

table inet filter {
    chain input {
        type filter hook input priority filter; policy drop;
        
        # Allow loopback
        iif "lo" accept
        
        # Allow established and related connections
        ct state established,related accept
        
        # Allow ICMP
        ip protocol icmp accept
        ip6 nexthdr ipv6-icmp accept
        
        # SSH with rate limiting on standard port
        tcp dport 22 ct state new limit rate 4/minute burst 8 packets accept
        tcp dport 22 drop
        
        # Drop everything else
        reject
    }
    
    chain forward {
        type filter hook forward priority filter; policy drop;
    }
    
    chain output {
        type filter hook output priority filter; policy accept;
    }
}
EOF

# Generate SSH key for current user if none exists
print_status "Step 7: Setting up SSH keys..."
CURRENT_USER=$(logname)
USER_HOME=$(eval echo ~$CURRENT_USER)

if [ ! -f "$USER_HOME/.ssh/id_ed25519" ]; then
    print_status "Generating SSH key for user $CURRENT_USER..."
    sudo -u $CURRENT_USER ssh-keygen -t ed25519 -f "$USER_HOME/.ssh/id_ed25519" -N ""
    print_status "SSH key generated: $USER_HOME/.ssh/id_ed25519.pub"
    print_warning "Make sure to copy this public key to authorized_keys before applying the config!"
    echo "Public key content:"
    cat "$USER_HOME/.ssh/id_ed25519.pub"
else
    print_status "SSH key already exists for user $CURRENT_USER"
fi

# Ensure authorized_keys file exists and has correct permissions
mkdir -p "$USER_HOME/.ssh"
touch "$USER_HOME/.ssh/authorized_keys"
chown -R $CURRENT_USER:$CURRENT_USER "$USER_HOME/.ssh"
chmod 700 "$USER_HOME/.ssh"
chmod 600 "$USER_HOME/.ssh/authorized_keys"

print_warning "IMPORTANT: Before applying changes, ensure your SSH key is in authorized_keys!"
read -p "Press Enter to continue when ready, or Ctrl+C to abort..."

# Step 8: Apply configurations
print_status "Step 8: Applying configurations..."

# Reload systemd
systemctl daemon-reload

# Enable and start fail2ban
systemctl enable fail2ban
systemctl start fail2ban

# Enable nftables
systemctl enable nftables
nft -f /etc/nftables.conf

# Test SSH config
print_status "Testing SSH configuration..."
sshd -t
if [ $? -eq 0 ]; then
    print_status "SSH configuration test passed!"
else
    print_error "SSH configuration test failed! Reverting..."
    cp /etc/ssh/sshd_config.bak.$(date +%F) /etc/ssh/sshd_config
    exit 1
fi

# Restart SSH service
print_status "Restarting SSH service..."
systemctl restart sshd

print_status "SSH hardening completed successfully!"
print_warning "SSH is running on standard port 22"
print_warning "Root login is disabled"
print_warning "Password authentication is disabled"
print_warning "Make sure you can connect with your SSH key before closing this session!"

echo ""
echo "To connect to this server, use:"
echo "ssh $CURRENT_USER@$(hostname -I | awk '{print $1}')"
echo ""
echo "Next steps:"
echo "1. Test SSH connection from another terminal"
echo "2. Set up 2FA if desired (see manual steps)"
echo "3. Review logs: journalctl -u sshd"
echo "4. Check fail2ban status: fail2ban-client status"
